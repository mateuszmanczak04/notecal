datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  // Identity
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String

  // Settings
  defaultNoteDuration Int    @default(60) // in minutes
  displayedDays       Int    @default(5)
  zoomLevel           Int    @default(3)
  language            String @default("en")
  orderTasks          String @default("createdAt")

  // Others
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
  Task      Task[]
  Note      Note[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime
}

model Course {
  id          String   @id @default(cuid())
  name        String
  teacher     String
  color       String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  usefulLinks String   @default("")
  Task        Task[]
  Note        Note[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TaskPriority {
  A
  B
  C
}

model Task {
  id          String        @id @default(cuid())
  title       String        @default("")
  description String        @default("")
  completed   Boolean       @default(false)
  dueDate     DateTime?
  priority    TaskPriority?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String?
  createdAt   DateTime      @default(now())
}

model Note {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime DateTime?
  endTime   DateTime?
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title     String    @default("")
  content   String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
