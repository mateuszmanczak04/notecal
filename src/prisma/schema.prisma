datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  courses   Course[]
  Task      Task[]
  Settings  Settings?
  Note      Note[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id      String @id @default(cuid())
  name    String
  teacher String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  Task    Task[]
  Note    Note[]
}

enum TaskPriority {
  A
  B
  C
}

model Task {
  id          String        @id @default(cuid())
  title       String
  description String
  completed   Boolean       @default(false)
  dueDate     DateTime?
  priority    TaskPriority?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String?
  createdAt   DateTime      @default(now())
}

enum ThemeEnum {
  light
  dark
}

enum OrderTasksEnum {
  title
  dueDate
  priority
  completed
  createdAt
}

model Settings {
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String         @id
  theme      ThemeEnum      @default(light)
  language   String
  orderTasks OrderTasksEnum @default(createdAt)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  content   String   @default("")
}
